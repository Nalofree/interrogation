<?php
class Controller_check_number extends Controller
{
  function __construct()
  {
    include "app/models/model_cards.php";
    $this->model = new Model_Cards();
    $this->view = new View();
  }

  function action_index()
  {

    $link = mysqli_connect("127.0.0.1", "db_user_n", "db_user_n", "interr_db");

    if (!$link) {
      echo "Ошибка: Невозможно установить соединение с MySQL." . PHP_EOL;
      echo "Код ошибки errno: " . mysqli_connect_errno() . PHP_EOL;
      echo "Текст ошибки error: " . mysqli_connect_error() . PHP_EOL;
      exit;
    }

//    var_dump($this->model->get_data());
//    var_dump($_POST);

    $num = $_POST['card_number'];

    if (!$num) {
      throw new Exception('Something went wrong. Number is not exist.');
    }

//    echo "Checking card number";
    if ($result_cards = $link->query("SELECT number FROM cards WHERE cards.number = '".$num."'")) { //INNER JOIN
      // users ON
      // users.card_id = cards.id
//      var_dump($result_cards);
      // Check card is exist
      if ($result_cards->num_rows > 0) {
//        echo "Card is exist, work in progress";
        // check registred lead
        if ($result_leads = $link->query("SELECT id FROM leads WHERE leads.card_id = '".$num."'")) {
          if ($result_leads->num_rows > 0) {
            echo "Lead is exist, send err message";
          }else{
//            echo "Lead is not exist, work in progress";
//            echo "<br><br> redirect to firststep";
            $host  = $_SERVER['HTTP_HOST'];
//            echo $host.'/leads/index/?card='.$num;
//            header('Location: /leads/index/?card='.$num);
            $data = array('card'=>$num);
            $this->view->generate('reg_form_view.php', 'template_view.php',$data);
          }
        }else {
          var_dump($result_leads);
          throw new Exception('Something went wrong');
        }
      }else{
        echo "Card is not exist, send err message";
      }
    }else{
      var_dump($result_cards);
      throw new Exception('Something went wrong');
    }

//    $this->view->generate('404_view.php', 'template_view.php');
  }

  function action_preset() {

    $link = mysqli_connect("127.0.0.1", "db_user_n", "db_user_n", "interr_db");

    if (!$link) {
      echo "Ошибка: Невозможно установить соединение с MySQL." . PHP_EOL;
      echo "Код ошибки errno: " . mysqli_connect_errno() . PHP_EOL;
      echo "Текст ошибки error: " . mysqli_connect_error() . PHP_EOL;
      exit;
    }

    function randomNumber($length) {
      $min = 1 . str_repeat(0, $length-1);
      $max = str_repeat(9, $length);
      return mt_rand($min, $max);
    }

    if ($result = $link->query("SELECT number FROM cards")) {
//      printf("Select вернул %d строк.\n", $result->num_rows);
//      return $result->num_rows;


      if ($result->num_rows > 0) {

        echo "Заполнено";
        return false;
      } else {
        echo "Fill cards <br><br>";
        $card_numbers = array();
        $types = array(
          "000"=>"hot",
          "001"=>"warm",
          "010"=>"cold",
          "011"=>"staff",
          "100"=>"hugarden",
        );
        $hot_cards = [643449, 511687, 653618, 828449, 419716, 292911, 371280, 416660, 691750, 339498, 629358, 387475,
          217280, 430445, 439031, 539867, 450781, 560042, 766518, 881947, 531875, 889761, 220662, 541090, 212865, 408911, 679960, 417132, 801796, 870607, 362626, 418801, 800968, 298419, 829893, 484685, 803376, 516252, 525878, 669808, 382661, 823901, 536919, 780986, 841756, 880375, 571813, 427192, 655651, 646933, 620406, 844171, 737070, 489222, 580090, 597402, 337971, 530895, 705676, 513752, 194431, 439550, 746329, 215525, 820319, 559661, 433863, 546911, 505432, 574062, 271230, 467826, 426857, 279383, 605277, 676561, 663324, 435263, 866158, 727687, 381546, 412833, 463168, 318145, 866610, 566443, 255572, 701957, 686755, 746785, 879867, 266535, 507840, 608740, 665813, 427547, 209167, 235602, 850170, 379623, 453602, 677510, 428656, 596600, 656683, 611054, 222680, 392012, 585390, 706543, 378663, 231296, 222774, 881230, 651020, 615789, 646947, 370469, 566469, 876153, 875580, 556389, 443669, 869775, 648970, 259258, 306732, 597728, 632875, 745002, 292077, 379615, 778923, 225631, 672301, 690739, 785575, 889233, 416334, 862965, 235554, 860497, 272236, 282650, 467174, 351705, 826830, 402690, 217096, 848508,];
        $warm_cards = [879824, 532992, 674397, 559169, 433367, 591974, 771808, 286583, 759895, 676002, 205630,
          426310, 277106, 371287, 758218, 469943, 566770, 274631, 387406, 327661, 574260, 408774, 696971, 649212, 678431, 552923, 511859, 696183, 728318, 259872, 610529, 214147, 297090, 686051, 219984, 407658, 748199, 390505, 232392, 560301, 339108, 846139, 423282, 362071, 712712, 193990, 201847, 653279, 825248, 815982, 808645, 584371, 364511, 296738, 828062, 224485, 728826, 213833, 343702, 628614, 189612, 848585, 351718, 401794, 669616, 210958, 334292, 570611, 585433, 344562, 441703, 204499, 567422, 462279, 607623, 754411, 825496, 405086, 786454, 887071, 741044, 638009, 695608, 746473, 409153, 288605, 727823, 717466, 326962, 628657, 464862, 239907, 631569, 294839, 711543, 272337, 447204, 713471, 449143, 602237, 864458, 297217, 729419, 482836, 719521, 341737, 203627, 302874, 409811, 239819, 850142, 486361, 412221, 689882, 218026, 869880, 769192, 456088, 661755, 403182, 230486, 841793, 426694, 768584, 530542, 546770, 258133, 249679, 192888, 853157, 500681, 541148, 600336, 659709, 648722, 459189, 499418, 490984, 241080, 472541, 364357, 740245, 238543, 503418, 497682, 219585, 681564, 390878, 744537, 538583, 397168, 733337, 888173, 617870, 346596, 823686, 720492, 519935, 215882, 763781, 402366, 813856, 300172, 682744, 818640, 478443, 865438, 576914, 192423, 219113, 812929, 205253, 489617, 577713, 709852, 837518, 476709, 276155, 817914, 451092, 412294, 562743, 532417, 497398, 215347, 291145, 234789, 690197, 518032, 809831, 381448, 504685, 203641, 612725, 489153, 823479, 196391, 607149, 702409, 780846,];
        $cold_beers = [287881, 694532, 357591, 602940, 212810, 756524, 235172, 419528, 665966, 721165, 366640,
          527097, 514396, 385767, 630222, 504664, 712179, 241494, 618503, 433674, 330973, 394114, 598472, 818269, 222317, 526345, 405863, 411408, 600417, 711421, 853183, 653712, 611588, 640931, 615576, 443135, 445202, 791279, 860580, 632662, 724154, 689139, 536487, 209609, 352707, 546769, 599602, 600928, 725615, 873292, 344077, 846133, 231316, 365320, 710676, 386211, 559086, 652114, 539686, 479895, 387900, 700513, 497160, 614864, 746405, 343191, 360527, 197556, 269246, 506448, 460722, 256639, 817128, 650638, 873555, 652323, 548479, 293712, 736433, 417378, 682301, 703863, 334084, 678844, 230296, 270543, 348454, 838263, 587736, 298471, 549213, 306242, 341432, 404479, 270742, 381983, 386730, 235673, 208279, 877349, 598978, 261777, 778350, 287286, 456490, 465870, 609944, 791559, 270872, 882853, 650808, 699478, 421155, 847270, 804367, 352144, 535706, 565626, 331815, 877012, 470247, 352336, 890541, 504286, 191716, 546205, 763080, 271276, 379185, 589157, 697579, 846816, 682378, 830114, 348650, 669375, 668636, 668513, 267210, 364193, 669814, 403085, 427833, 611624, 657230, 198243, 280773, 276348, 700490, 734912, 236119, 229691, 309002, 604411, 750101, 834256, 658967, 399331, 534234, 323408, 277998, 788106, 692652, 260866, 343827, 496179, 757616, 795182, 361857, 202625, 278991, 692270, 296888, 600949, 768596, 216159, 273023, 782835, 779286, 800175, 192808, 350931, 865586, 586834, 474800, 742840, 628196, 723331, 722217, 828385, 217048, 405960, 301384, 192306, 890947, 749386, 290114, 781320, 401553, 883239, 615270, 673067, 493825, 714537, 560523, 502600, 490532, 311771, 827455, 610227, 487281, 222729, 550467, 310116, 565383, 379507, 702584, 818759, 873602, 666402, 697965, 463343, 457620, 491931, 647332, 582867, 465304, 348511, 479999, 373553, 393374, 716481, 693830, 209523, 558179, 235620, 794799, 774253, 541283, 335448, 678454, 783793, 704058, 727297, 669782, 723759, 863861, 295020, 771534, 479552, 394203, 282058, 565730, 500169, 735963, 410119, 281256, 334316, 219613, 578686, 782300, 500234, 786668, 668920, 576855, 885648, 475514, 534608, 545906, 512877, 442816, 665442, 548173, 817463, 282500, 407959, 720404, 393329, 320076, 518726, 657043, 490643, 472812, 769594, 582124, 523290, 475200, 475703, 828837, 733492, 287227, 319701, 401698, 618511, 496617, 795873, 845937, 822686, 637229, 220532, 626329, 550393, 544880, 875312, 814306, 465583, 809202, 259627, 602914, 686796, 518105, 264353, 858727, 208351, 309080, 500431, 662654, 841577, 326798, 888542, 786620, 503721, 822056, 424185, 297236, 619260, 213608, 804394, 636406, 552374, 621324, 417998, 824258, 596458, 229531, 276481, 385765, 320486, 694051, 781708, 694921, 436901, 266651, 297020, 791994, 862079, 483232, 643845, 643715, 775380, 815190, 603355, 471096, 363304, 753217, 761362, 847714, 390428, 563745, 199745, 693973, 401776, 279584, 270590, 605682, 782256, 516669, 749324, 683531, 473628, 702433, 870279, 660735, 873723, 537115, 703162, 876460, 562609, 258384, 406318, 720630, 640428, 454285, 600905, 806357, 718423, 236537, 253505, 397294, 260572, 445405, 720391, 269950, 870809, 296650, 366096, 696697, 563679, 508154, 596196, 809300, 451970, 523463, 275256, 298169, 253456, 792119, 782413, 578837, 730366, 887603, 225474, 676858, 803226, 307615, 440913, 254464, 882923, 833084, 840166, 700636, 556796, 443519, 523466, 761193, 460291, 530603, 408616, 285369, 595483, 889313, 692276, 640746, 737508, 344056, 767769, 201900, 670831, 892883, 307127, 587263, 506545, 342056, 446874, 628975, 870464, 439119, 221828, 540186, 727999, 283632, 214780, 802689, 404766, 253678, 865958, 471626, 242581, 697005, 809964, 425353, 448719, 634694, 421561, 690011, 831364, 213075, 271774, 856061, 545244, 699517, 601253, 474481, 656713, 687025, 579847, 760504, 785596, 513828, 247947, 368013, 358226, 834356, 389128, 790118, 329403, 296519, 810472, 254217, 483548, 829270, 819425, 349428, 607009, 223919, 746576, 306173, 797209, 352119, 734853, 669596, 597977, 307980, 443000, 805150, 215975, 210999, 374230, 415773, 626279, 703265, 689503, 523877, 520164, 234562, 682283, 510827, 305625, 861116, 452880, 586714, 266564, 392397, 654940, 530145, 385914, 350412, 577271, 474403, 712726, 304608, 821324, 885530, 823804, 819526, 496525, 479436, 672061, 224063, 740414, 546578, 251324, 300234, 570278, 448459, 349105, 413342, 395400, 644680, 784209];
        $staffs = [29143, 481461, 193749, 400096, 852135, 728788, 203568, 511781, 342322, 293408, 855669, 892989,
          380945,
          653452, 473322, 238180, 718199, 339726, 636593, 510878, 846225, 813700, 528166, 192941, 586937, 245987, 284647, 559619, 636148, 384382, 264739, 566233, 360741, 580630, 643139, 721564, 832531, 265951, 637293, 243652, 368136, 686242, 660462, 607292, 819750, 490702, 531693, 478974, 890470, 208247, 585844, 293608, 491265, 849194, 823593, 496426, 870086, 417857, 484423, 389685, 463517, 569629, 561089, 791844, 519099, 193850, 576896, 236760, 332973, 804816, 667117, 503339, 558866, 716164, 226755, 768663, 821404, 478289, 453984, 747961, 854532, 708875, 319962, 428231, 338963, 862866, 584901, 647045, 680915, 862596, 578852, 877233, 612199, 641205, 239471, 401307, 215389, 330105, 428019, 684517];

        foreach ($hot_cards as $hot_card) {
          $record = $link->query("INSERT INTO cards (number, type) VALUES ('".$hot_card."','00')");
          if (!$record) {
            throw new Exception('Filling card numbers to database error');
          }
        }

        foreach ($warm_cards as $warm_card) {
          $record = $link->query("INSERT INTO cards (number, type) VALUES ('".$warm_card."','01')");
          if (!$record) {
            throw new Exception('Filling card numbers to database error');
          }
        }

        foreach ($cold_beers as $cold_beer) {
          $record = $link->query("INSERT INTO cards (number, type) VALUES ('".$cold_beer."','10')");
          if (!$record) {
            throw new Exception('Filling card numbers to database error');
          }
        }

        foreach ($staffs as $staff) {
          $record = $link->query("INSERT INTO cards (number, type) VALUES ('".$staff."','11')");
          if (!$record) {
            throw new Exception('Filling card numbers to database error');
          }
        }

        foreach ($types as $key => $type) {
          if($key = "000") {

          }
//          $count_card_numbers = 0;
//          do {
//            $num = randomNumber(6);
//            if (!array_search($num, $card_numbers)) {
//              array_push($card_numbers,randomNumber(6));
//              $count_card_numbers++;
//              $record = $link->query("INSERT INTO cards (number, type) VALUES ('".$num."','".$key."')");
//              if (!$record) {
//                throw new Exception('Filling card numbers to database error');
//              }
//            }
//          } while ($count_card_numbers < 600);
        }
      }
      echo count($card_numbers);

      /* очищаем результирующий набор */
      $result->close();
    }
  }
}